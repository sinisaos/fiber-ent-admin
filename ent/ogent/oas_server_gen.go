// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateAnswer implements createAnswer operation.
	//
	// Creates a new Answer and persists it to storage.
	//
	// POST /answers
	CreateAnswer(ctx context.Context, req *CreateAnswerReq) (CreateAnswerRes, error)
	// CreateQuestion implements createQuestion operation.
	//
	// Creates a new Question and persists it to storage.
	//
	// POST /questions
	CreateQuestion(ctx context.Context, req *CreateQuestionReq) (CreateQuestionRes, error)
	// CreateTag implements createTag operation.
	//
	// Creates a new Tag and persists it to storage.
	//
	// POST /tags
	CreateTag(ctx context.Context, req *CreateTagReq) (CreateTagRes, error)
	// CreateUser implements createUser operation.
	//
	// Creates a new User and persists it to storage.
	//
	// POST /users
	CreateUser(ctx context.Context, req *CreateUserReq) (CreateUserRes, error)
	// DeleteAnswer implements deleteAnswer operation.
	//
	// Deletes the Answer with the requested ID.
	//
	// DELETE /answers/{id}
	DeleteAnswer(ctx context.Context, params DeleteAnswerParams) (DeleteAnswerRes, error)
	// DeleteQuestion implements deleteQuestion operation.
	//
	// Deletes the Question with the requested ID.
	//
	// DELETE /questions/{id}
	DeleteQuestion(ctx context.Context, params DeleteQuestionParams) (DeleteQuestionRes, error)
	// DeleteTag implements deleteTag operation.
	//
	// Deletes the Tag with the requested ID.
	//
	// DELETE /tags/{id}
	DeleteTag(ctx context.Context, params DeleteTagParams) (DeleteTagRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Deletes the User with the requested ID.
	//
	// DELETE /users/{id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// ListAnswer implements listAnswer operation.
	//
	// List Answers.
	//
	// GET /answers
	ListAnswer(ctx context.Context, params ListAnswerParams) (ListAnswerRes, error)
	// ListQuestion implements listQuestion operation.
	//
	// List Questions.
	//
	// GET /questions
	ListQuestion(ctx context.Context, params ListQuestionParams) (ListQuestionRes, error)
	// ListQuestionAnswers implements listQuestionAnswers operation.
	//
	// List attached Answers.
	//
	// GET /questions/{id}/answers
	ListQuestionAnswers(ctx context.Context, params ListQuestionAnswersParams) (ListQuestionAnswersRes, error)
	// ListQuestionTags implements listQuestionTags operation.
	//
	// List attached Tags.
	//
	// GET /questions/{id}/tags
	ListQuestionTags(ctx context.Context, params ListQuestionTagsParams) (ListQuestionTagsRes, error)
	// ListTag implements listTag operation.
	//
	// List Tags.
	//
	// GET /tags
	ListTag(ctx context.Context, params ListTagParams) (ListTagRes, error)
	// ListTagQuestions implements listTagQuestions operation.
	//
	// List attached Questions.
	//
	// GET /tags/{id}/questions
	ListTagQuestions(ctx context.Context, params ListTagQuestionsParams) (ListTagQuestionsRes, error)
	// ListUser implements listUser operation.
	//
	// List Users.
	//
	// GET /users
	ListUser(ctx context.Context, params ListUserParams) (ListUserRes, error)
	// ListUserAnswers implements listUserAnswers operation.
	//
	// List attached Answers.
	//
	// GET /users/{id}/answers
	ListUserAnswers(ctx context.Context, params ListUserAnswersParams) (ListUserAnswersRes, error)
	// ListUserQuestions implements listUserQuestions operation.
	//
	// List attached Questions.
	//
	// GET /users/{id}/questions
	ListUserQuestions(ctx context.Context, params ListUserQuestionsParams) (ListUserQuestionsRes, error)
	// ListUserTags implements listUserTags operation.
	//
	// List attached Tags.
	//
	// GET /users/{id}/tags
	ListUserTags(ctx context.Context, params ListUserTagsParams) (ListUserTagsRes, error)
	// ReadAnswer implements readAnswer operation.
	//
	// Finds the Answer with the requested ID and returns it.
	//
	// GET /answers/{id}
	ReadAnswer(ctx context.Context, params ReadAnswerParams) (ReadAnswerRes, error)
	// ReadAnswerAuthor implements readAnswerAuthor operation.
	//
	// Find the attached User of the Answer with the given ID.
	//
	// GET /answers/{id}/author
	ReadAnswerAuthor(ctx context.Context, params ReadAnswerAuthorParams) (ReadAnswerAuthorRes, error)
	// ReadAnswerQuestion implements readAnswerQuestion operation.
	//
	// Find the attached Question of the Answer with the given ID.
	//
	// GET /answers/{id}/question
	ReadAnswerQuestion(ctx context.Context, params ReadAnswerQuestionParams) (ReadAnswerQuestionRes, error)
	// ReadQuestion implements readQuestion operation.
	//
	// Finds the Question with the requested ID and returns it.
	//
	// GET /questions/{id}
	ReadQuestion(ctx context.Context, params ReadQuestionParams) (ReadQuestionRes, error)
	// ReadQuestionAuthor implements readQuestionAuthor operation.
	//
	// Find the attached User of the Question with the given ID.
	//
	// GET /questions/{id}/author
	ReadQuestionAuthor(ctx context.Context, params ReadQuestionAuthorParams) (ReadQuestionAuthorRes, error)
	// ReadTag implements readTag operation.
	//
	// Finds the Tag with the requested ID and returns it.
	//
	// GET /tags/{id}
	ReadTag(ctx context.Context, params ReadTagParams) (ReadTagRes, error)
	// ReadUser implements readUser operation.
	//
	// Finds the User with the requested ID and returns it.
	//
	// GET /users/{id}
	ReadUser(ctx context.Context, params ReadUserParams) (ReadUserRes, error)
	// UpdateAnswer implements updateAnswer operation.
	//
	// Updates a Answer and persists changes to storage.
	//
	// PATCH /answers/{id}
	UpdateAnswer(ctx context.Context, req *UpdateAnswerReq, params UpdateAnswerParams) (UpdateAnswerRes, error)
	// UpdateQuestion implements updateQuestion operation.
	//
	// Updates a Question and persists changes to storage.
	//
	// PATCH /questions/{id}
	UpdateQuestion(ctx context.Context, req *UpdateQuestionReq, params UpdateQuestionParams) (UpdateQuestionRes, error)
	// UpdateTag implements updateTag operation.
	//
	// Updates a Tag and persists changes to storage.
	//
	// PATCH /tags/{id}
	UpdateTag(ctx context.Context, req *UpdateTagReq, params UpdateTagParams) (UpdateTagRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Updates a User and persists changes to storage.
	//
	// PATCH /users/{id}
	UpdateUser(ctx context.Context, req *UpdateUserReq, params UpdateUserParams) (UpdateUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
