// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AnswersColumns holds the columns for the "answers" table.
	AnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "question_answers", Type: field.TypeInt, Nullable: true},
		{Name: "user_answers", Type: field.TypeInt, Nullable: true},
	}
	// AnswersTable holds the schema information for the "answers" table.
	AnswersTable = &schema.Table{
		Name:       "answers",
		Columns:    AnswersColumns,
		PrimaryKey: []*schema.Column{AnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "answers_questions_answers",
				Columns:    []*schema.Column{AnswersColumns[3]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "answers_users_answers",
				Columns:    []*schema.Column{AnswersColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_questions", Type: field.TypeInt, Nullable: true},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questions_users_questions",
				Columns:    []*schema.Column{QuestionsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "user_tags", Type: field.TypeInt, Nullable: true},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tags_users_tags",
				Columns:    []*schema.Column{TagsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "superuser", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// TagQuestionsColumns holds the columns for the "tag_questions" table.
	TagQuestionsColumns = []*schema.Column{
		{Name: "tag_id", Type: field.TypeInt},
		{Name: "question_id", Type: field.TypeInt},
	}
	// TagQuestionsTable holds the schema information for the "tag_questions" table.
	TagQuestionsTable = &schema.Table{
		Name:       "tag_questions",
		Columns:    TagQuestionsColumns,
		PrimaryKey: []*schema.Column{TagQuestionsColumns[0], TagQuestionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tag_questions_tag_id",
				Columns:    []*schema.Column{TagQuestionsColumns[0]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tag_questions_question_id",
				Columns:    []*schema.Column{TagQuestionsColumns[1]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AnswersTable,
		QuestionsTable,
		TagsTable,
		UsersTable,
		TagQuestionsTable,
	}
)

func init() {
	AnswersTable.ForeignKeys[0].RefTable = QuestionsTable
	AnswersTable.ForeignKeys[1].RefTable = UsersTable
	QuestionsTable.ForeignKeys[0].RefTable = UsersTable
	TagsTable.ForeignKeys[0].RefTable = UsersTable
	TagQuestionsTable.ForeignKeys[0].RefTable = TagsTable
	TagQuestionsTable.ForeignKeys[1].RefTable = QuestionsTable
}
